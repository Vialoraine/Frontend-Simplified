Welcome to Learn Git Branching:

  You can see all the commands available with 'show commands' at the terminal.

Main:
  Introduction Sequence => introduction to majority of git commands

  Intoduction to Git Commits:
    A commit in a git repository records a snapshot of all the (tracked) files in your directory

  Git Branches:
    A branch essentially says "I want to include the work of this commit and all parent commits."

    Let's tell git we want to checkout the branch with => git checkout <name>
    
    This will put us on the new branch before committing our changes.
      Shortcut: if you want to create a new branch AND check it out at the same time, you can simply type => git checkout -b [yourbranchname]

  Merging in Git:
    The first method to combine work that we will examine is => git merge. 
    
    Merging in Git creates a special commit that has two unique parents. A commit with two parents essentially means "I want to include all the work from this parent over here and this one over here, and the set of all their parents."

  Rebase Introduction:
    The second way of combining work between branches is rebasing. Rebasing essentially takes a set of commits, "copies" them, and plops them down somewhere else.

  Detatch yo' HEAD
    'HEAD' always points to the most recent commit which is reflected in the working tree.

    Detaching HEAD just means attaching it to a commit instead of a branch.

  Relative Refs:
  Relative commits are powerful, but we will introduce two simple ones here:

  Moving upwards one commit at a time with ^ => git checkout main^
  Moving upwards a number of times with ~<num> => git checkout HEAD~4
  
    (^) => Moving around in Git by specifying commit hashes can get a bit tedious. In the real world you won't have a nice commit tree visualization next to your terminal, so you'll have to use git log to see hashes.

      It only requires you to specify enough characters of the hash until it uniquely identifies the commit

        fed2da64c0efc5293610bdd892f82a58e8cbc5d8 => fed2

    (~) => Say you want to move a lot of levels up in the commit tree. It might be tedious to type ^ several times, so Git also has the tilde (~) operator.
    
    The tilde operator (optionally) takes in a trailing number that specifies the number of parents you would like to ascend. Let's see it in action.

    Branch forcing:

      One of the most common ways I use relative refs is to move branches around. You can directly reassign a branch to a commit with the -f option. So something like => git branch -f main HEAD~3

      moves (by force) the main branch to three parents behind HEAD

    Reversing Changes in Git:
      There are two primary ways to undo changes in Git -- one is using 'git reset' and the other is using 'git revert'.

      git reset => reverses changes by moving a branch reference backwards in time to an older commit. In this sense you can think of it as "rewriting history;" 'git reset' will move a branch backwards as if the commit had never been made in the first place.

        git reset HEAD~1 => moves from c2 to c1
      
      While resetting works great for local branches on your own machine, its method of "rewriting history" doesn't work for remote branches that others are using.

      In order to reverse changes and share those with others, we need to use => git revert

        git revert HEAD

    Moving Work Around:
      The first command in this series is called git cherry-pick. It takes on the following form:

      git cherry-pick <Commit1> <Commit2> <...> => git cherry-pick c1 c2

      It's a very straightforward way of saying that you would like to copy a series of commits below your current location (HEAD).




    


